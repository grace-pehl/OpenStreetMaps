{"name":"Grace Pehl, PhD","tagline":"Wrangling OpenStreetMaps data into MongoDB","body":"I downloaded the [OpenStreetMaps](http://www.openstreetmap.org/) data for my area, cleaned some aspects of the data in python and converted the XML data into JSON format.  I inserted the JSON data into a MongoDB database and did some exploration of the user-entered information.\r\n\r\n# Map Area: Florida's Treasure Coast region (lat. 27 to 28, long. -81 to -80)\r\nhttp://www.openstreetmap.org/export#map=9/27.5022/-80.5009\r\n## Problems Encountered in the Map\r\n1. Over-abbreviated street types were expanded using a mapping.\r\n  ```python\r\n  mapping = { \"St\": \"Street\", \"St.\": \"Street\", \"Ave\": \"Avenue\", \"ave\": \"Avenue\",\r\n  \"Rd.\": \"Road\", \"Pl\": \"Place\", \"Ct\": \"Court\", \"Dr.\": \"Drive\",\r\n  \"Dr\": \"Drive\", \"Blvd\": \"Boulevard\", \"BLVD\": \"Boulevard\",\r\n  \"SE\": \"Southeast\"}\r\n  ```\r\n2. State appeared as both “FL” and “Florida.” Since the US postal system uses state\r\nabbreviations, “FL” was used as standard.\r\n  ```python\r\n  if key == \"addr:state\" & value == \"Florida\":\r\n  value = \"FL\"\r\n  ```\r\n3. The city of Hobe Sound was listed as Hobe Sound, FL in the city field.\r\n  ```python\r\n  if key == \"addr:city\" & value == \"Hobe Sound, FL\":\r\n  value = \"Hobe Sound\"\r\n  ```\r\n4. Despite the region's many faiths, only three religions are present in data: christian, jewish, and\r\nunitarian_universalist. This indicates that the map needs additional user input.\r\n## Overview of the Data\r\n### Statistics of the OSM file:\r\n#### OSM file size: 82,586 kB\r\n#### JSON file size: 89,959 kB\r\n#### Tags:\r\n```\r\n'member' 24700\r\n'meta' 1\r\n'nd' 446341\r\n'node' 373451\r\n'note' 1\r\n'osm' 1\r\n'relation' 373,\r\n'tag' 229216\r\n'way' 33166\r\n```\r\n#### Unique users: 273\r\n#### Type of keys: 621 unique keys used\r\n'lower': 85955, 'lower_colon': 133910, 'other': 9351, 'problemchars': 0\r\n### MongoDB Queries\r\nSample document: \r\n```\r\ndb.osm.find_one()\r\n_id': ObjectId('55b32875d44d5c1768b3d426'),\r\nu'created': {u'changeset': u'14920451',\r\nu'timestamp': u'2013-02-05T10:53:40Z',\r\nu'uid': u'207745',\r\nu'user': u'NE2',\r\nu'version': u'3'},\r\nu'id': u'26786875',\r\nu'pos': [27.6932111, -80.8890663],\r\nu'type': u'node'}\r\n```\r\n* Total number of documents: 406,617 ```db.osm.find().count()```\r\n* Number of nodes: 373,450 ```db.osm.find({\"type\":\"node\"}).count()```\r\n* Number of ways: 33,166 ```db.osm.find({\"type\":\"way\"}).count()```\r\n* Number of unique users (by user id): 261\r\n```\r\npipeline = “[{\"$group\":{\"_id\":\"$created.uid\", \"count\":{\"$sum\":1}}}]”\r\ndb.osm.aggregate(pipeline)\r\n```\r\nTop 5 contributing users (by user name):\r\n* user contributions\r\n* “grouper” 157,846\r\n* “woodpeck_fixbot 53,623\r\n* “NE2” 52,685\r\n* “Latze” 14,854\r\n* “Chris Lawrence” 12,198\r\n```\r\npipeline = “[{\"$group\" :{ \"_id\" : \"$created.user\",\r\n\"count\" : {\"$sum\" : 1 }}},\r\n{ \"$sort\" : { \"count\" : -1 }},\r\n{ \"$limit\" : 5}]”\r\ndb.osm.aggregate(pipeline)\r\n```\r\nNumber of users contributing 1 entry (by user name): 46\r\n```\r\npipeline = “[{\"$group\":{\"_id\":\"$created.uid\", \"count\":{\"$sum\":1}}},\r\n{\"$group\":{\"_id\":\"$count\", \"num_users\":{\"$sum\":1}}},\r\n{\"$sort\":{\"_id\":1}},\r\n{\"$limit\":1}]”\r\ndb.osm.aggregate(pipeline)```\r\nNumber of amenities: 1065 ```db.osm.find({\"amenity\":{\"$exists\": 1}}).count()```\r\n## Other Ideas about the Dataset\r\n### Key prefixes\r\nIn the dataset, 621 different keys were used to describe the data. Listing them showed many keys\r\ncarrieds a prefix, often “tiger:” or “gnis:” A search revealed that tiger is an acronym used for a spatial\r\nextract from the US Census Bureau and gnis stands for geographic names information system used by\r\nthe US Geological Survey. A further cleaning step could be to remove these prefixes from the key and\r\ncreate another key = “source” with value = “tiger” or “gnis”.\r\n### “Name:” keys\r\nThere are also hundreds of keys that seem useless, called “name:” followed by 2-3 random letters such\r\nas “bcl”, “rw”, “kv”, “diq”, or “tpi”. These keys could be investigated and possibly removed from the\r\ndataset.\r\n## Improvements to OSM\r\nData analysis using Open Street Maps is complicated by the non-standardized formats. It would be\r\nhelpful if users had more guidance as they entered data. Drop-down boxes would be useful for the\r\nmost commonly entered data like address and amenity, but would become to cumbersome if used for\r\nall types of user-entered data. Perhaps the 10 most common keys could be in a drop-down box, with a\r\nwrite-in “other” choice available. A few short style guidelines (“Avoid abbreviations except for\r\ncountries and states.”) or samples of good input would guide users to entering cleaner data, without\r\ngiving up the flexibility of the OSM project.\r\n## Additional data exploration using MongoDB queries\r\nNumber of amenities: 1065 \r\n```r\r\ndb.osm.find({\"amenity\":{\"$exists\": 1}}).count()\r\nTypes of amenities: pipeline = “[{\"$group\": {\"_id\": \"$amenity\", \"count\":{\"$sum\":1}}},\r\n{\"$sort\" : {\"count\" : -1}}]”\r\ndb.osm.aggregate(pipeline)\r\n{u'count': 321, u'_id': u'place_of_worship'}\r\n{u'count': 159, u'_id': u'parking'}\r\n{u'count': 148, u'_id': u'school'}\r\n{u'count': 67, u'_id': u'restaurant'}\r\n{u'count': 62, u'_id': u'fuel'}\r\n{u'count': 58, u'_id': u'fire_station'}\r\n{u'count': 50, u'_id': u'fast_food'}\r\n{u'count': 24, u'_id': u'bank'}\r\n{u'count': 20, u'_id': u'library'}\r\n{u'count': 19, u'_id': u'pharmacy'}\r\n{u'count': 17, u'_id': u'police'}\r\n{u'count': 16, u'_id': u'post_office'}\r\n{u'count': 14, u'_id': u'hospital'}\r\n{u'count': 12, u'_id': u'toilets'}\r\n{u'count': 12, u'_id': u'fountain'}\r\n{u'count': 10, u'_id': u'grave_yard'}\r\n{u'count': 8, u'_id': u'cafe'}\r\n{u'count': 7, u'_id': u'swimming_pool'}\r\n{u'count': 6, u'_id': u'atm'}\r\n{u'count': 4, u'_id': u'community_centre'}\r\n{u'count': 4, u'_id': u'theatre'}\r\n{u'count': 3, u'_id': u'car_wash'}\r\n{u'count': 3, u'_id': u'prison'}\r\n{u'count': 3, u'_id': u'public_building'}\r\n{u'count': 2, u'_id': u'auto:service'}\r\n{u'count': 2, u'_id': u'parking_aisle'}\r\n{u'count': 2, u'_id': u'dentist'}\r\n{u'count': 2, u'_id': u'shelter'}\r\n{u'count': 2, u'_id': u'bar'}\r\n{u'count': 1, u'_id': u'college'}\r\n{u'count': 1, u'_id': u'boat_storage'}\r\n{u'count': 1, u'_id': u'university'}\r\n{u'count': 1, u'_id': u'department_store'}\r\n{u'count': 1, u'_id': u'animal_shelter'}\r\n{u'count': 1, u'_id': u'doctors'}\r\n{u'count': 1, u'_id': u'townhall'}\r\n{u'count': 1, u'_id': u'social_centre\"}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}